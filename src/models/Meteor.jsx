/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Maxim Mavrichev (https://sketchfab.com/mvrc.art)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/meteor-d3a5a7e9a7d24b76841bf0f49d56a5f3
Title: Meteor
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import meteor from  "../assets/3d/meteor.glb"
import { useFrame, useThree } from "@react-three/fiber";

export function Meteor(props) {
  const { nodes, materials } = useGLTF(meteor);
  const group = useRef();
  const { size, viewport } = useThree();
  const aspect = size.width / viewport.width;

  useFrame(({ clock }) => {
    // Calculate position based on a sine wave
    const time = clock.getElapsedTime();
    const radius = 2;
    const speed = 1;

    const x = Math.sin(time * speed) * radius;
    const y = Math.sin(time * 0.5 * speed) * radius; // Adjust the y-coordinate for a more dynamic motion
    const z = Math.cos(time * speed) * radius;

    // Set the position of the space ship
    group.current.position.set(x, y, z);

    // Rotate the spaceship for a dynamic appearance
    group.current.rotation.y = time;

    // Adjust the dynamics of the space ship
    group.current.rotation.x = Math.sin(time * 0.2) * 0.2; // Adjust the pitch
    group.current.rotation.z = Math.sin(time * 0.2) * 0.2; // Adjust the roll
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={materials.Material}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload(meteor);
